[user] # Git user settings
	name = Borislav Dostumski
	email = b.dostumski@gmail.com
	username = bdostumski
	signingkey = signingkey  # Using GPG signing

[init] # Git init settings
	defaultBranch = main

[core] # Basic Git settings
	editor = nvim
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	pager = "bat --paging=always --style=plain"

[pager]
	diff = "bat --paging=always --style=plain"

[sendmail] # Send mail using mu4e
	smtpserver = /usr/bin/mu
	smtpserverport = 587
	smtpuser = b.dostumski@gmail.com

[web] # Open a web browser
	browser = firefox

[instaweb] # Start a webserver for the repository
	httpd = lighttpd --httpd=lighttpd -d webrick -p 1111 -i

[rerere] # Reuse recorded resolution of conflicted merges
	enable = 1
	autoupdate = 1

[color] # Git color settings
	ui = auto
	diff = auto
	status = auto

[color "branch"] # Branch color settings
	current = yellow bold
	local = green bold
	remote = cyan bold

[color "diff"] # Diff color settings
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "status"] # Status color settings
	added = green bold
	changed = yellow bold
	untracked = red bold

[merge] # Merge settings
    	tool = nvimdiff
    	conflictstyle = diff3

[mergetool "nvimdiff"] # Merge tool settings
    	cmd = nvim -d "$LOCAL" "$BASE" "$REMOTE" "$MERGED"
	trustExitCode = true
    	prompt = false

[diff] # Diff settings
	tool = kitty
	guitool = kitty.gui

[difftool "nvimdiff"] # Diff tool settings
	prompt = false
	trustExitCode = true

[difftool "kitty"]
	cmd = kitten diff $LOCAL $REMOTE

[difftool "kitty.gui"]
	cmd = kitten diff $LOCAL $REMOTE

[delta] # Delta settings
	features = line-numbers decorations
	line-numbers = true

[delta "no-color"]
	color-only = false
	syntax-theme = none

[delta "decorations"] # Delta decorations settings
	minus-style = red bold normal
	plus-style = green bold normal
	minus-emph-style = white bold red
	minus-non-emph-style = red bold normal
	plus-emph-style = white bold green
	file-style = yellow bold none
	file-decoration-style = yellow box
	hunk-header-style = magenta bold
	hunk-header-decoration-style = magenta box
	minus-empty-line-marker-style = normal normal
	plus-empty-line-marker-style = normal normal
	line-number-right-format = "â”‚{nm:>4} "

[trim] # Trim settings
	bases = master, main, develop, dev, staging, test, testing, release, trunk
	protected = *prod, *production

[github] # GitHub settings
	user = bdostumski
	token = token # GitHub token

[sequence] # Sequence settings
	editor = interactive-rebase-tool # 

[alias]
	a = add --all # Add all changes
	ai = add -i # Add interactively
	#############
	ap = apply # Apply patch
	as = apply --stat # Apply patch with stat
	ac = apply --check # Apply patch with check
	#############
	ama = am --abort # Abort am
	amr = am --resolved # Resolved am
	ams = am --skip # Skip am
	#############
	b = branch # Branch
	ba = branch -a # Branch all
	bd = branch -d # Branch delete
	bdd = branch -D # Branch delete force
	br = branch -r # Branch remote
	bc = rev-parse --abbrev-ref HEAD # Branch current
	bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}" # Branch upstream
	bs = !git-branch-status # Branch status
	#############
	c = commit # Commit
	ca = commit -a # Commit all
	cm = commit -m # Commit message
	cam = commit -am # Commit all message
	cem = commit --allow-empty -m # Commit empty message
	cd = commit --amend # Commit amend
	cad = commit -a --amend # Commit all amend
	ced = commit --allow-empty --amend # Commit empty amend
	cfu = commit --fixup # Commit fixup
	csq = commit --squash # Commit squash
	#############
	cl = clone # Clone
	cld = clone --depth 1 # Clone depth 1
	clg = !sh -c 'git clone https://github.com/$1 $(basename $1)' - # Clone GitHub
	clgp = !sh -c 'git clone git@github.com:$1 $(basename $1)' - # Clone GitHub private
	clgu = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' - # Clone GitHub user
	#############
	cp = cherry-pick # Cherry-pick
	cpa = cherry-pick --abort # Cherry-pick abort
	cpc = cherry-pick --continue # Cherry-pick continue
	#############
	d = diff # Diff
	dp = diff --patience # Diff patience
	dc = diff --cached # Diff cached
	dk = diff --check # Diff check
	dck = diff --cached --check # Diff cached check
	dt = difftool # Diff tool
	dct = difftool --cached # Diff tool cached
	#############
	f = fetch # Fetch
	fo = fetch origin # Fetch origin
	fu = fetch upstream # Fetch upstream
	#############
	fp = format-patch # Format patch
	#############
	fk = fsck # File system check
	#############
	g = grep -p # Grep
	#############
	l = log --oneline # Log
	lg = log --oneline --graph --decorate # Log graph
	#############
	ls = ls-files # List files
	lsf = !git ls-files | grep -i # List files filter
	#############
	m = merge # Merge
	ma = merge --abort # Merge abort
	mc = merge --continue # Merge continue
	ms = merge --skip # Merge skip
	mt = mergetool -y # Merge tool
	#############
	o = checkout # Checkout
	om = checkout master # Checkout master
	ob = checkout -b # Checkout branch
	#############
	pr = prune -v # Prune
	#############
	ps = push # Push
	psf = push -f # Push force
	psu = push -u # Push upstream
	pst = push --tags # Push tags
	#############
	pso = push origin # Push origin
	psao = push --all origin # Push all origin
	psfo = push -f origin # Push force origin
	psuo = push -u origin # Push upstream origin
	#############
	psom = push origin master # Push origin master
	psaom = push --all origin master # Push all origin master
	psfom = push -f origin master # Push force origin master
	psuom = push -u origin master # Push upstream origin master
	psoc = !git push origin $(git bc) # Push origin current
	psaoc = !git push --all origin $(git bc) # Push all origin current
	psfoc = !git push -f origin $(git bc) # Push force origin current
	psuoc = !git push -u origin $(git bc) # Push upstream origin current
	psdc = !git push origin :$(git bc) # Push delete origin current
	#############
	pl = pull # Pull
	pb = pull --rebase # Pull rebase
	#############
	plo = pull origin # Pull origin
	pbo = pull --rebase origin # Pull rebase origin
	plom = pull origin master # Pull origin master
	ploc = !git pull origin $(git bc) # Pull origin current
	pbom = pull --rebase origin master # Pull rebase origin master
	pboc = !git pull --rebase origin $(git bc) # Pull rebase origin current
	#############
	plu = pull upstream # Pull upstream
	plum = pull upstream master # Pull upstream master
	pluc = !git pull upstream $(git bc) # Pull upstream current
	pbum = pull --rebase upstream master # Pull rebase upstream master
	pbuc = !git pull --rebase upstream $(git bc) # Pull rebase upstream current
	#############
	rb = rebase # Rebase
	rba = rebase --abort # Rebase abort
	rbc = rebase --continue # Rebase continue
	rbi = rebase --interactive # Rebase interactive
	rbs = rebase --skip # Rebase skip
	#############
	re = reset # Reset
	rh = reset HEAD # Reset HEAD
	reh = reset --hard # Reset hard
	rem = reset --mixed # Reset mixed
	res = reset --soft # Reset soft
	rehh = reset --hard HEAD # Reset hard HEAD
	remh = reset --mixed HEAD # Reset mixed HEAD
	resh = reset --soft HEAD # Reset soft HEAD
	rehom = reset --hard origin/master # Reset hard origin master
	#############
	r = remote # Remote
	ra = remote add # Remote add
	rr = remote rm # Remote remove
	rv = remote -v # Remote verbose
	rn = remote rename # Remote rename
	rp = remote prune # Remote prune
	rs = remote show # Remote show
	rao = remote add origin # Remote add origin
	rau = remote add upstream # Remote add upstream
	rro = remote remove origin # Remote remove origin
	rru = remote remove upstream # Remote remove upstream
	rso = remote show origin # Remote show origin
	rsu = remote show upstream # Remote show upstream
	rpo = remote prune origin # Remote prune origin
	rpu = remote prune upstream # Remote prune upstream
	#############
	rmf = rm -f # Remove force
	rmrf = rm -r -f # Remove recursive force
	#############
	s = status # Status
	sb = status -s -b # Status short branch
	#############
	sa = stash apply # Stash apply
	sc = stash clear # Stash clear
	sd = stash drop # Stash drop
	sl = stash list # Stash list
	sp = stash pop # Stash pop
	ss = stash save # Stash save
	ssk = stash save -k # Stash save keep index
	sw = stash show # Stash show
	st = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*' # Stash total
	#############
	t = tag # Tag
	td = tag -d # Tag delete
	#############
	w = show # Show
	wp = show -p # Show patch
	wr = show -p --no-color # Show patch no color
	#############
	svnr = svn rebase # SVN rebase
	svnd = svn dcommit # SVN dcommit
	svnl = svn log --oneline --show-commit # SVN log
	#############
	subadd = !sh -c 'git submodule add https://github.com/$1 $2/$(basename $1)' - # Submodule add
	subrm = !sh -c 'git submodule deinit -f -- $1 && rm -rf .git/modules/$1 && git rm -f $1' - # Submodule remove
	subup = submodule update --init --recursive # Submodule update
	subpull = submodule foreach 'git pull --tags -f origin master || git pull --tags -f origin main || git pull --tags -f origin development' # Submodule pull
	#############
	assume = update-index --assume-unchanged # Assume
	unassume = update-index --no-assume-unchanged # Unassume
	assumed = !git ls -v | grep ^h | cut -c 3- # Assumed
	unassumeall = !git assumed | xargs git unassume # Unassume all
	assumeall = !git status -s | awk {'print $2'} | xargs git assume # Assume all
	#############
	bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' - # Bump
	release = !sh -c 'git tag v$1 && git pst' - # Release
	unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' - # Unrelease
	merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' - # Merged
	aliases = !git config -l | grep alias | cut -c 7- # Aliases
	snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}' # Snap
	bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' - # Bare
	whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' - # Whois
	serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git # Serve
	#############
	behind = !git rev-list --left-only --count $(git bu)...HEAD # Behind
	ahead = !git rev-list --right-only --count $(git bu)...HEAD # Ahead
	#############
	ours = "!f() { git checkout --ours $@ && git add $@; }; f" # Ours
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f" # Theirs
	subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' - # Subrepo
	human = name-rev --name-only --refs=refs/heads/* 
[filter "lfs"] # Git LFS settings
	clean = git-lfs clean -- %f # Clean
	smudge = git-lfs smudge -- %f # Smudge
	process = git-lfs filter-process # Process
	required = true # Required

